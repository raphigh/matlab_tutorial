{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "ARRAYS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "تعریف متغیر"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a = 4\r\n"
     ]
    }
   ],
   "source": [
    "a = 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d = 0.2000\r\n"
     ]
    }
   ],
   "source": [
    "d = .2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "g = 2.3674\r\n"
     ]
    }
   ],
   "source": [
    "g = 2.36743"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "نماد;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "s = 5.69;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f = 6.6900\r\n"
     ]
    }
   ],
   "source": [
    "f = s + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "نماد ،"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d = 2\r\n"
     ]
    }
   ],
   "source": [
    "d = 2,e = 12;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a = 1\r\n",
      "b = 2\r\n",
      "c = 3\r\n"
     ]
    }
   ],
   "source": [
    "a =1 , b =2 , c = 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "نمادe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 2.0000e+10\r\n"
     ]
    }
   ],
   "source": [
    "20000000000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "e + 10 ~ 10 ^ 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 1\r\n"
     ]
    }
   ],
   "source": [
    "1000e-3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "برخی نماد ها"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 3.1416\r\n"
     ]
    }
   ],
   "source": [
    "pi"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =  0 + 1i\r\n"
     ]
    }
   ],
   "source": [
    "i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =  0 + 1i\r\n"
     ]
    }
   ],
   "source": [
    "j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 2.2204e-16\r\n"
     ]
    }
   ],
   "source": [
    "eps"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = Inf\r\n"
     ]
    }
   ],
   "source": [
    "inf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = NaN\r\n"
     ]
    }
   ],
   "source": [
    "nan"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = NaN\r\n"
     ]
    }
   ],
   "source": [
    "0/0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = Inf\r\n"
     ]
    }
   ],
   "source": [
    "1/0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "نمایش تمام کلمات کلیدی متلب"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "{\r\n",
      "  [1,1] = __FILE__\r\n",
      "  [2,1] = __LINE__\r\n",
      "  [3,1] = break\r\n",
      "  [4,1] = case\r\n",
      "  [5,1] = catch\r\n",
      "  [6,1] = classdef\r\n",
      "  [7,1] = continue\r\n",
      "  [8,1] = do\r\n",
      "  [9,1] = else\r\n",
      "  [10,1] = elseif\r\n",
      "  [11,1] = end\r\n",
      "  [12,1] = end_try_catch\r\n",
      "  [13,1] = end_unwind_protect\r\n",
      "  [14,1] = endclassdef\r\n",
      "  [15,1] = endenumeration\r\n",
      "  [16,1] = endevents\r\n",
      "  [17,1] = endfor\r\n",
      "  [18,1] = endfunction\r\n",
      "  [19,1] = endif\r\n",
      "  [20,1] = endmethods\r\n",
      "  [21,1] = endparfor\r\n",
      "  [22,1] = endproperties\r\n",
      "  [23,1] = endswitch\r\n",
      "  [24,1] = endwhile\r\n",
      "  [25,1] = for\r\n",
      "  [26,1] = function\r\n",
      "  [27,1] = global\r\n",
      "  [28,1] = if\r\n",
      "  [29,1] = otherwise\r\n",
      "  [30,1] = parfor\r\n",
      "  [31,1] = persistent\r\n",
      "  [32,1] = return\r\n",
      "  [33,1] = switch\r\n",
      "  [34,1] = try\r\n",
      "  [35,1] = until\r\n",
      "  [36,1] = unwind_protect\r\n",
      "  [37,1] = unwind_protect_cleanup\r\n",
      "  [38,1] = while\r\n",
      "}\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "iskeyword"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "کامنت گذاری"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "%سلام"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "اعداد مختلط"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =  2 + 3i\r\n"
     ]
    }
   ],
   "source": [
    "2 + 3i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =  0.4500 + 3.8000i\r\n"
     ]
    }
   ],
   "source": [
    ".45 + 3.8i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =  4 + 3i\r\n"
     ]
    }
   ],
   "source": [
    "4 + 3 * i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error: 'i3' undefined near line 1, column 1\r\n"
     ]
    }
   ],
   "source": [
    "4 + i3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 34\r\n"
     ]
    }
   ],
   "source": [
    "i = 10;4 + 3 * i"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =  4 + 3i\r\n"
     ]
    }
   ],
   "source": [
    "i = 10;4 + 3 * 1i"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "آرایه ها"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a =\r\n",
      "\r\n",
      "   2   5   8\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a = [2,5,8]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "b =\r\n",
      "\r\n",
      "   2.0000  -9.0000   1.3600   5.2000   6.9000\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "b = [2 -9 1.36 5.2 6.9]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d = [](0x0)\r\n"
     ]
    }
   ],
   "source": [
    "d = [] %ماتریس تهی"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "تعریف عنصر به عنصر آرایه"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c =\r\n",
      "\r\n",
      "   2   5   8\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "c(1) = 2;c(2) = 5;c(3) = 8;\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "%اندیس ها در متلب اعداد طبیعی هستند"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "%هرگاه عنصری را در آرایه مقدار دهی نکنیم به صورت پیشفرض صفر در نظر گرفته می شود"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f =\r\n",
      "\r\n",
      "   5   8   0   0   0  -5\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "f(1) =5;f(2) = 8;f(6) = -5;\n",
    "f"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "آرایه های منظم"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c =\r\n",
      "\r\n",
      "   1   2   3   4   5\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "c = 1:5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c1 =\r\n",
      "\r\n",
      "   0   1   2   3   4   5   6\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "c1 = 0 : 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c2 =\r\n",
      "\r\n",
      "  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6   7   8   9\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "c2 = -6 : 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d1 =\r\n",
      "\r\n",
      "    0    2    4    6    8   10\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "d1 = 0:2:10 %اعداد 0 تا 10 با گام های 2 تایی"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d2 =\r\n",
      "\r\n",
      " Columns 1 through 7:\r\n",
      "\r\n",
      "          0     0.2000     0.4000     0.6000     0.8000     1.0000     1.2000\r\n",
      "\r\n",
      " Columns 8 through 14:\r\n",
      "\r\n",
      "     1.4000     1.6000     1.8000     2.0000     2.2000     2.4000     2.6000\r\n",
      "\r\n",
      " Columns 15 through 21:\r\n",
      "\r\n",
      "     2.8000     3.0000     3.2000     3.4000     3.6000     3.8000     4.0000\r\n",
      "\r\n",
      " Columns 22 through 28:\r\n",
      "\r\n",
      "     4.2000     4.4000     4.6000     4.8000     5.0000     5.2000     5.4000\r\n",
      "\r\n",
      " Columns 29 through 35:\r\n",
      "\r\n",
      "     5.6000     5.8000     6.0000     6.2000     6.4000     6.6000     6.8000\r\n",
      "\r\n",
      " Columns 36 through 42:\r\n",
      "\r\n",
      "     7.0000     7.2000     7.4000     7.6000     7.8000     8.0000     8.2000\r\n",
      "\r\n",
      " Columns 43 through 49:\r\n",
      "\r\n",
      "     8.4000     8.6000     8.8000     9.0000     9.2000     9.4000     9.6000\r\n",
      "\r\n",
      " Columns 50 and 51:\r\n",
      "\r\n",
      "     9.8000    10.0000\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "d2 = 0:.2:10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "d3 =\r\n",
      "\r\n",
      "   0  -1  -2  -3\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "d3 = 0:-1:-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
    "%برای حالت نزولی،گام منفی حتما باید ذکر شود وگرنه تهی خواهد بود"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   1.0000   1.2000   1.4000   1.6000   1.8000   2.0000\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "linspace(1,2,6) %بازه ی 1 تا 2 را به 6 قسمت مساوی تقسیم می کند و کران های بازه ها را چاپ می کند"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "  0  0  0\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "zeros(1,3) %برداری سه تایی از صفر می سازد"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   1   1   1\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "ones(1,3) % برداری سه تایی از یک می سازد"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   5   5   5\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "5 * ones(1,3) %برداری سه تایی از پنج می سازد"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "اعداد و آرایه های تصادفی"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      " Columns 1 through 8:\r\n",
      "\r\n",
      "   0.4511   0.8106   0.6464   0.6237   0.8475   0.9250   0.5845   0.1793\r\n",
      "\r\n",
      " Columns 9 and 10:\r\n",
      "\r\n",
      "   0.2263   0.3578\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "rand(1,10) %آرایه ای از 10 عنصر با توزیع یکنواخت در بازه 0 تا 1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   3.9751   7.3687   5.4172\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "8*rand(1,3)%برای گسترش بازه می توان تابع را در عددی ضرب کرد"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   0.884487  -0.012691  -0.193382   1.083285\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "randn(1,4) %تولید چهار عدد تصادفی با توزیع نرمال"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   1   6   8   4   7   5   2   3\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "randperm(8) %اعداد 1-8 را به طور تصادفی مرتب می کند"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "فراخوانی و مقدار دهی آرایه ها"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 8\r\n"
     ]
    }
   ],
   "source": [
    "a(3) %فراخوانی عنصر سوم "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "error: a(0): subscripts must be either integers 1 to (2^63)-1 or logicals\r\n"
     ]
    }
   ],
   "source": [
    "a(0) %تعریف نشده"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   2   5\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a(1:2) %فراخوانی چند مقدار"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   3.5778e+00   9.1009e-02   1.0260e+01   1.2137e+01\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   1.2137e+01   1.0260e+01   9.1009e-02   3.5778e+00\r\n",
      "\r\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 13.206\r\n"
     ]
    }
   ],
   "source": [
    "a = 15 * rand(1,15);\n",
    "a(2:5)\n",
    "a(5:-1:2)\n",
    "a(end)%آخرین جمله"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 5.5558\r\n"
     ]
    }
   ],
   "source": [
    "a(end - 3) %جمله ی سه تا مانده به آخر"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      " Columns 1 through 6:\r\n",
      "\r\n",
      "   9.1009e-02   1.0260e+01   1.2137e+01   3.6534e+00   6.2604e+00   2.1312e+00\r\n",
      "\r\n",
      " Columns 7 through 12:\r\n",
      "\r\n",
      "   1.3263e+01   1.1252e+01   4.9706e+00   5.5558e+00   4.8195e+00   1.4550e+01\r\n",
      "\r\n",
      " Column 13:\r\n",
      "\r\n",
      "   1.3206e+01\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a(3:end) %از سومین جمله به بعد"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      " Columns 1 through 6:\r\n",
      "\r\n",
      "   1.3206e+01   1.4550e+01   4.8195e+00   5.5558e+00   4.9706e+00   1.1252e+01\r\n",
      "\r\n",
      " Columns 7 through 12:\r\n",
      "\r\n",
      "   1.3263e+01   2.1312e+00   6.2604e+00   3.6534e+00   1.2137e+01   1.0260e+01\r\n",
      "\r\n",
      " Columns 13 through 15:\r\n",
      "\r\n",
      "   9.1009e-02   3.5778e+00   9.1450e+00\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a(end:-1:1) %از آخر به اول"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   9.1450e+00\r\n",
      "   3.5778e+00\r\n",
      "   9.1009e-02\r\n",
      "   1.0260e+01\r\n",
      "   1.2137e+01\r\n",
      "   3.6534e+00\r\n",
      "   6.2604e+00\r\n",
      "   2.1312e+00\r\n",
      "   1.3263e+01\r\n",
      "   1.1252e+01\r\n",
      "   4.9706e+00\r\n",
      "   5.5558e+00\r\n",
      "   4.8195e+00\r\n",
      "   1.4550e+01\r\n",
      "   1.3206e+01\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a(:) % از اول تا آخر به صورت ستونی"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   3.5778   6.2604\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a([2 7]) %عنصر دوم و هفتم"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = 9.1450\r\n"
     ]
    }
   ],
   "source": [
    "a(c(1)) % اولین جمله ی بردار سی را محاسبه کرده و جمله ای از آ که اندیسش آن عدد باشد را نمایش می دهد"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   9.1450e+00   3.5778e+00   9.1009e-02   1.0260e+01   1.2137e+01\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans = [](0x0)\r\n"
     ]
    }
   ],
   "source": [
    "a(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "   9.1450e+00   3.5778e+00   9.1009e-02   1.0260e+01   1.2137e+01   3.5778e+00\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a([c d 2])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "مقداردهی آرایه ها"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a =\r\n",
      "\r\n",
      " Columns 1 through 8:\r\n",
      "\r\n",
      "    1.0000    1.0000    1.0000   10.2599   12.1370    3.6534    6.2604    2.1312\r\n",
      "\r\n",
      " Columns 9 through 15:\r\n",
      "\r\n",
      "   13.2629   11.2525    4.9706    5.5558    4.8195   14.5504   13.2062\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a(1:3) = [1 1 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a =\r\n",
      "\r\n",
      " Columns 1 through 8:\r\n",
      "\r\n",
      "    1.0000   77.0000    1.0000   10.2599   12.1370    3.6534   77.0000    2.1312\r\n",
      "\r\n",
      " Columns 9 through 15:\r\n",
      "\r\n",
      "   13.2629   11.2525    4.9706    5.5558    4.8195   14.5504   13.2062\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a([2 7]) = [77 77]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x =\r\n",
      "\r\n",
      " Columns 1 through 8:\r\n",
      "\r\n",
      "    1.0000   77.0000    1.0000   10.2599   12.1370    3.6534   77.0000    2.1312\r\n",
      "\r\n",
      " Columns 9 through 15:\r\n",
      "\r\n",
      "   13.2629   11.2525    4.9706    5.5558    4.8195   14.5504   13.2062\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "x = a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x =\r\n",
      "\r\n",
      " Columns 1 through 8:\r\n",
      "\r\n",
      "    1.0000   10.2599   12.1370    3.6534   77.0000    2.1312   13.2629   11.2525\r\n",
      "\r\n",
      " Columns 9 through 13:\r\n",
      "\r\n",
      "    4.9706    5.5558    4.8195   14.5504   13.2062\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "x(1) = [] %حذف عنصر"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x =\r\n",
      "\r\n",
      " Columns 1 through 8:\r\n",
      "\r\n",
      "    3.6534   77.0000    2.1312   13.2629   11.2525    4.9706    5.5558    4.8195\r\n",
      "\r\n",
      " Columns 9 and 10:\r\n",
      "\r\n",
      "   14.5504   13.2062\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "x(1:3) = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ans =\r\n",
      "\r\n",
      "    3.6534    2.1312   11.2525    5.5558   14.5504\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "x(1:2:end)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a =\r\n",
      "\r\n",
      " Columns 1 through 8:\r\n",
      "\r\n",
      "    1.0000   77.0000    1.0000   10.2599   12.1370    3.6534   77.0000    2.1312\r\n",
      "\r\n",
      " Columns 9 through 15:\r\n",
      "\r\n",
      "   13.2629   11.2525    4.9706    5.5558    4.8195   14.5504   13.2062\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
   ],
   "source": [
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Octave",
   "language": "octave",
   "name": "octave",
   "resource_dir": "/ext/jupyter/kernels/octave"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}